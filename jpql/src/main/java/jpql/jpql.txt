<JPQL 문법>
• select m from Member as m where m.age > 18
• 엔티티와 속성은 대소문자 구분O (Member, age)
• JPQL 키워드는 대소문자 구분X (SELECT, FROM, where)
• 엔티티 이름 사용, 테이블 이름이 아님(Member)
• 별칭은 필수(m) (as는 생략가능) ****

• query.getResultList(): 결과가 하나 이상일 때, 리스트 반환
                         결과가 없으면 빈 리스트 반환
• query.getSingleResult(): 결과가 정확히 하나, 단일 객체 반환
               결과가 없으면: javax.persistence.NoResultException
               둘 이상이면: javax.persistence.NonUniqueResultException

ex) SELECT m FROM Member m where m.username=:username
    query.setParameter("username", usernameParam);


프로젝션 - 여러 값 조회
• SELECT m.username, m.age FROM Member m
• 1. Query 타입으로 조회
• 2. Object[] 타입으로 조회
• 3. new 명령어로 조회
• 단순 값을 DTO로 바로 조회
SELECT new jpabook.jpql.UserDTO(m.username, m.age) FROM
Member m
• 패키지 명을 포함한 전체 클래스 명 입력
• 순서와 타입이 일치하는 생성자 필요


<페이징 API>
• JPA는 페이징을 다음 두 API로 추상화
• setFirstResult(int startPosition) : 조회 시작 위치 (0부터 시작)
• setMaxResults(int maxResult) : 조회할 데이터 수


<조인>
• 내부 조인: SELECT m FROM Member m [INNER] JOIN m.team t
• 외부 조인: SELECT m FROM Member m LEFT [OUTER] JOIN m.team t

1. 조인 대상 필터링
• 예) 회원과 팀을 조인하면서, 팀 이름이 A인 팀만 조인
JPQL: SELECT m, t FROM Member m LEFT JOIN m.team t on t.name = 'A'

2. 연관관계 없는 엔티티 외부 조인
• 예) 회원의 이름과 팀의 이름이 같은 대상 외부 조인
JPQL: SELECT m, t FROM Member m LEFT JOIN Team t on m.username = t.name


<JPA 서브 쿼리 한계>
• JPA는 WHERE, HAVING 절에서만 서브 쿼리 사용 가능
• SELECT 절도 가능(하이버네이트에서 지원)

• FROM 절의 서브 쿼리(인라인 뷰)는 현재 JPQL에서 불가능
    • 조인으로 풀 수 있으면 풀어서 해결


<JPQL 타입 표현>
• ENUM: jpql.MemberType.Admin (패키지명 포함)


<조건식 - CASE 식>
• COALESCE: 하나씩 조회해서 null이 아니면 반환
• NULLIF: 두 값이 같으면 null 반환, 다르면 첫번째 값 반환


<경로 표현식 특징>
• 상태 필드(state field): 경로 탐색의 끝, 탐색X
• 단일 값 연관 경로: 묵시적 내부 조인(inner join) 발생, 탐색O
• 컬렉션 값 연관 경로: 묵시적 내부 조인 발생, 탐색X
    • FROM 절에서 명시적 조인을 통해 별칭을 얻으면 별칭을 통해 탐색 가능
• 가급적 묵시적 조인 대신에 명시적 조인 사용 **

<페치 조인과 일반 조인의 차이>
• 페치 조인을 사용할 때만 연관된 엔티티도 함께 조회(즉시 로딩)
• 페치 조인은 객체 그래프를 SQL 한번에 조회하는 개념

페치 조인의 특징과 한계
• 페치 조인 대상에는 별칭을 줄 수 없다.
    • 하이버네이트는 가능, 가급적 사용X
• 둘 이상의 컬렉션은 페치 조인 할 수 없다.
• 컬렉션을 페치 조인하면 페이징 API
  (setFirstResult, setMaxResults)를 사용할 수 없다.

<Named 쿼리 - 정적 쿼리>
• 미리 정의해서 이름을 부여해두고 사용하는 JPQL
• 정적 쿼리
• 어노테이션, XML에 정의
• 애플리케이션 로딩 시점에 초기화 후 재사용
• 애플리케이션 로딩 시점에 쿼리를 검증

<벌크 연산>
• 쿼리 한 번으로 여러 테이블 로우 변경(엔티티)
• executeUpdate()의 결과는 영향받은 엔티티 수 반환
• UPDATE, DELETE 지원
• INSERT(insert into .. select, 하이버네이트 지원)

벌크 연산 주의
• 벌크 연산은 영속성 컨텍스트를 무시하고 데이터베이스에 직접 쿼리
    • 벌크 연산을 먼저 실행
    • 벌크 연산 수행 후 영속성 컨텍스트 초기화