다대일 양방향
- 외래 키가 있는 쪽이 연관관계의 주인
- 양쪽을 서로 참조하도록 개발

일대다 단방향
- 일대다 단방향은 일대다(1:N)에서 일(1)이 연관관계의 주인
- 테이블 일대다 관계는 항상 다(N)쪽에 외래키가 있음
- 객체와 테이블의 차이때문에 반대편 테이블의 외래키를 관리하는 특이한 구조
- @JoinColumn을 꼭 사용해야함.
일대다 단방향매핑의 단점
- 엔티티가 관리하는 외래키가 다른 테이블에 있음
===> 일대다 단방향 매핑보다는 **다대일 양방향매핑**을 사용하자

일대일 관계
- 일대일 관계는 그 반대도 일대일
- 주 테이블이나 대상 테이블 중에 외래 키 선택 가능
    - 주 테이블에 외래 키 or 대상 테이블에 외래 키
- 외래 키에 데이터베이스 유니크(UNI) 제약조건 추가

일대일: 대상 테이블에 외래 키 단방향
- 단방향 관계는 JPA 지원x

다대다 관계
- 객체는 컬렉션을 사용해서 객체 2개로 다대다 관계 가능
- 편리해보이지만 실무에서는 사용 X
- 연결 테이블이 단순히 연결만 하고 끝나지 않음
- 주문시간, 수량 같은 데이터가 들어올 수 있음


<상속관계 매핑>
- 관계형 데이터베이스는 상속관계 X
- 슈퍼타입 서브타입 관계라는 모델링 기법이 객체 상속과 유사
- 상속관계 매핑 : 객체의 상속과 구조와 DB의 슈퍼타입 서브타입관계를 매핑
@Inheritance(strategy = InheritanceType.XXX)
    - JOINED : 조인전략
    - SINGLE_TABLE : 단일 테이블 전략
    - TABLE_PER_CLASS : 구현 클래스마다 테이블 전략 (***쓰면 안되는 전략!!!)
@DiscriminatorColumn : DTYPE이 추가됨

* 조인전략(JOINED)
- 장점
    - 테이블 정규화
    - 외래키 참조 무결성 제약조건 활용가능
    - 저장공간 효울화
- 단점
    - 조회시 조인을 많이 사용, 성능 저하
    - 조회 쿼리가 복잡함
    - 데이터 저장시 INSERT SQL 2번 호출

* 단일 테이블 전략(SINGLE_TABLE)
- 장점
    - 조인이 필요 없으므로 일반적으로 조회 성능이 빠름
    - 조회 쿼리가 단순함
- 단점
    - 자식 엔티티가 매핑한 컬럼은 모두 null 허용
    - 단일 테이블에 모든 것을 저장하므로 테이블이 커질 수 있다.
      상황에 따라서 조회 성능이 오히려 느려질 수 있다.